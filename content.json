{"pages":[],"posts":[{"title":"Java","text":"Java의 역사 Java는 C와 C++은 포인터로 메모리를 직접 핸들링을 해서 시스템이 다운될 확률이 높아 더 안정적인 언어가 없을까 해서 썬 마이크로시스템즈의 제임스 고슬링과 다른 연구원들이 개발한 객체 지향적 프로그래밍 언어이다. 1991년 그린프로젝트라는 이름으로 시작해서 1995년에 정식 발표했다. (Java의 초기 이름은 오크(Oak) or 그린(Green)) 최초의 Java는 C++를 약간 변형한 형태로 가전제품에 내장된 프로그램을 위한 언어로 만들어 졌지만 현재의 자바는 웹앱과 모바일 프로그램 개발까지 폭넓게 사용되고 있다. Java의 특징 WORA(Write Once Run Anywhere)가 가능해 플랫폼에 영향을 받지 않으므로 다양한 환경에서 사용가능하다. 객체지향 언어이기 때문에 유지보수가 쉽고 확장성이 좋다 프로그램이 안정적이다 풍부한 기능이 제공되는 오픈 소스이다. 소스: 프로그래밍 언어로 작성된 텍스트 파일 컴파일: 소스 파일을 컴퓨터가 이해할 수 있는 기계어로 만드는 과정 바이트파일: 자바 가상 기계(JVM)에서 실행 가능한 바이너리 코드 파일 JVM(Java Virtual Machine): 각기 다른 플랫폼에서 동일한 자바 실행 환경 제공. JVM 자체는 플랫폼에 종속적이다. 객체와 클래스 객체란? 클래스의 모양 그대로 찍어낸 실체 프로그램 실행중에 생성되는 실체 메모리 공간을 갖는 구체적인 실체 인스턴스(instance)라고도 부른다. 클래스란? 객체를 만들어내기 위한 설계도 혹은 틀 객체의 속성(state)과 행동(behavior) 포함. 예) 클래스 객체 사람 나, 너, 이웃집아저씨 붕어빵틀 구워진 붕어빵 여러개 소나타 자동차 출고된 실제 소나타 20대 객체지향 프로그래밍(OOP)이란? 프로그램의 구현을 시간의 흐름순이 아닌 객체간의 관계와 협력을 기반으로 프로그래밍 하는것이다. 객체지향 프로그래밍의 장점 소프트웨어의 생산성 향상 컴퓨터 산업의 발전에 따라 소프트웨어의 생명 주기(Life Cycle)단축 소프트웨어를 빠른 속도로 생산할 필요성 증대 객체지향 언어 캡슐화, 상속, 다형성, 객체 등 소프트웨어 재사용을 위한 여러 장치가 내장되있음. 소프트웨어 재사용과 부분 수정이 빠름 소프트웨어를 다시 만드는 부담 줄어들음 소프트웨어 생산성 향상. 실세계에 대한 쉬운 모델링 컴퓨터 산업 초기때는 수학계산/통계 처리를 하는 등의 처리과정, 계산 절차가 중요했지만 현대에는 절차나 과정보다 물체(객체)들의 상호작용으로 묘사하는 것이 용이해졌기 때문 보안성 향상 객체지향의 캡슐화 특징으로 실제 구현되는 부분을 외부에서 볼 수 없으므로 정보 은닉 가능. 객체지향 프로그래밍의 단점 느린 개발속도 모든 객체의 역활과 기능을 이해해야 하기 때문에 프로그래밍에 많은 시간이 소모된다. 느린 실행속도 절차지향 프로그래밍에 비해 느린 실행속도 메모리와 연산에 대한 비용이 증가한다. 높은 난이도 절차지향 프로그래밍에 비해 난이도가 높다. 객체지향 언어(Object-oriented Language) 객체지향 언어란 프로그램을 다수의 객체로 만들고, 이 객체끼리 서로 상호작용 하도록 만드는 프로그래밍 언어이다. 여기서 객체란, 현실로 따지면 TV, 책, 냉장고, 컴퓨터, 카메라 등이 모두 객체인 것이다. 객체는 객체마다 고유한 특성과 행동을 가진다. 객체지향 언어의 특징 캡슐화 (encapsulation) 객체를 캡슐로 싸서 내부를 볼 수 없게 하는 것 외부의 접근으로 부터 객체를 보호해 준다. 데이터와 코드의 형태를 외부에서 알 수 없다. 상속 (inheritance) 상위 객체의 속성이 하위 객체에 물려지는것 하위 객체가 상위 객체의 속성을 모두 가지는 관계 Java는 클래스의 다중 상속이 불가능하다. 하지만 인터페이스 다중 상속은 가능하다. 다형성 (polymorphism) 상속과 연관된 개념으로, 같은 이름의 메소드나 클래스가 객체에 따라 다르게 동작하도록 구현한 것 다시말해, 하나의 객체가 다른 여러 객체로 재구성 되는 것이다. 오버로딩(Overloading), 오버라이딩(Overriding)이 있다. 오버로딩(Overloading): 같은 이름인 함수를 여러개 정의한 후 매개변수를 다르게 하여 각자 다르게 동작하는 것 오버라이딩(Overriding): 슈퍼클래스의 메소드를 서브 클래스마다 다르게 구현한 것 추상화 (abstraction) 객체들의 공통된 특징(기능, 속성)을 도출하는 것이다. 클래스를 정의하는 것을 추상화라고 할 수 있다.","link":"/2022/04/05/Java%EB%9E%80/"},{"title":"Markdown 문법 정리","text":"마크다운(Markdown) 문법 정리목차 띄어쓰기(여러번) 줄바꿈 제목 강조 구분선 인용구 목록(리스트) 코드블럭 링크 이미지 테이블(표) 주석 제목(Header) &lt;h1&gt; ~ &lt;h6&gt; 까지 제목을 표현할 수 있다.# ~ ###### 예시 123456# 제목1## 제목2### 제목3#### 제목4##### 제목5###### 제목6 ↓결과 제목1제목2제목3제목4제목5제목6 띄어쓰기(여러번) Markdown은 띄어쓰기를 여러번 입력해도 하나로 인식해버린다.그래서 띄어쓰기를 여러번 할 수 있는 방법이 두가지 있다. 1. 공백 특수문자 사용하기 ( &amp;nbsp; 또는 &amp;#160; )예시 1여러번&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;띄어쓰기를&amp;#160;&amp;#160;&amp;#160;&amp;#160;하고싶다 ↓결과 여러번&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;띄어쓰기를&amp;#160;&amp;#160;&amp;#160;&amp;#160;하고싶다(블로그 테마를 바꾸니까 띄어쓰기가 먹히지 않는다……) 2. 전각문자로 띄어쓰기전각 문자는 한국어 키보드로는 입력이 불가능하고 일본어나 중국어 키보드일때만 입력이 가능하다. 전각문자 공백 : ( )괄호안에 있는 문자를 복사해서 사용 가능하다. 예시 1전각문자로 띄어쓰기 ↓결과 전각문자로 띄어쓰기 줄바꿈 문장 끝에 띄어쓰기 두번혹은 문장 중간이나 끝에 &lt;br&gt; 로 줄바꿈을 할 수 있다. 예시 123문장 끝에 띄어쓰기를 두번하면 줄이 바뀐다. 이렇게 &lt;br&gt; 띄어쓰기도 &lt;br&gt; 가능 &lt;br&gt; 하다 ↓결과 문장 끝에 띄어쓰기를 두번하면 줄이 바뀐다. 이렇게 띄어쓰기도 가능 하다 강조 예시 123456789101112*이탤릭체* _이탤릭체_ **굵은 폰트** __굵은 폰트__ ***이탤릭 굵은 폰트*** ___이탤릭 굵은 폰트___~~중간선 폰트~~문장 중간에 사용할 경우 **띄어쓰기** 를 사용하는 것이 좋다. ↓결과 이탤릭체이탤릭체 굵은 폰트굵은 폰트 이탤릭 굵은 폰트이탤릭 굵은 폰트 중간선 폰트 문장 중간에 사용할 경우 띄어쓰기 를 사용하는 것이 좋다. 구분선 회색 선을 그어서 줄을 구분할 수 있다. 예시 12345678910---***- - -* * *// `-` 나 `*` 를 3번이상 적으면 상관없이 줄이 그어진다.--------------************** ↓결과 // 3번이상 적으면 상관없이 줄이 그어진다. 인용구(BlockQuotes) &gt;주로 남의 말이나 글, 또는 자료에서 따온 문장을 쓸때 사용한다. 예시 12345678&gt; 인용문1&gt; 중첩인용구1 &gt; 중첩인용구11&gt;&gt; 중첩인용구2&lt;br&gt;&gt;&gt; 중첩인용구22&gt;&gt;&gt; 중첩인용구3 &gt;&gt;&gt; 중첩인용구33 ↓결과 인용문1 중첩인용구1중첩인용구11 중첩인용구2중첩인용구22 중첩인용구3중첩인용구33 목록(리스트) 순서가 없는 리스트 순서대로 숫자로 이루어진 것이 아닌 list-style이 있는 상태이다. - , + , * 서로 혼용이 가능하다. 예시 12345678910+ 리스트P- 리스트M* 리스트S- 리스트1.0 + 리스트1.1 * 리스트1.2 - 리스트1.3 + 리스트1.4 * 리스트 1.5 ↓결과 리스트P 리스트M 리스트S 리스트1.0 리스트1.1 리스트1.2 리스트1.3 리스트1.4 리스트 1.5 순서가 있는 리스트 순서대로 숫자로 이루어진 리스트이다. 예시 12345678910111. 리스트 11. 리스트 21. 리스트 3 // 순서가 있는 리스트 내부의 리스트도 자동으로 정렬된다.1. 리스트 4-1 1. 리스트 4-1-1 1. 리스트 4-1-2 1. 리스트 4-1-3 1. 리스트 4-1-3-1 1. 리스트 4-1-3-2 1. 리스트 4-1-3-3 ↓결과 리스트 1 리스트 2 리스트 3 // 순서가 있는 리스트 내부의 리스트도 자동으로 정렬된다. 리스트 4-1 리스트 4-1-1 리스트 4-1-2 리스트 4-1-3 리스트 4-1-3-1 리스트 4-1-3-2 리스트 4-1-3-3 코드블럭 코드가 한 줄일 경우에는 코드의 앞과 뒤로 ` (싱글쿼테이션(ESC키 밑에 있는 키)) 를 입력해 주면 된다. 예시 1한 줄 코드 `int i = 0;` 이다 ↓결과 한 줄 코드 int i = 0; 이다 코드가 여러 줄일 경우에는 ``` 또는 ~~~ 로 감싸줘야한다. 예시 123456```for(int i = 0; i &lt; 10; i++){ System.out.println(&quot;hello, World!&quot;)}``` 123456~~~for(int i = 0; i &lt; 10; i++){ System.out.println(&quot;hello, World!&quot;)}~~~ ↓결과 1234for(int i = 0; i &lt; 10; i++){ System.out.println(&quot;hello, World!&quot;)} 1234for(int i = 0; i &lt; 10; i++){ System.out.println(&quot;hello, World!&quot;)} 링크 외부 링크 인라인 링크: [링크제목](http://www.google.com)결과: 링크제목 참조 링크: 그것은 [여기에][1]있다.1[1]: http://www.google.com 결과: 그것은 여기에있다. url 링크: &lt;http://www.google.com&gt;결과:&amp;nbsp; http://www.google.com 내부 링크 예시 : [링크제목](#링크아이디)결과 : 링크제목 이미지 ![사진이름](사진경로) 예시![고양이](https://cdn.pixabay.com/photo/2019/11/08/11/56/cat-4611189_960_720.jpg) ↓결과 테이블(표) 예시 123456|이름|나이|성별||---|----|----||홍길동|25|남||김나미|30|여||안보영|35|여||대장균|40|남| ↓결과 이름 나이 성별 홍길동 25 남 김나미 30 여 안보영 35 여 대장균 40 남 테이블 정렬 오른쪽 정렬: —: 가운데 정렬: :—: 왼쪽 정렬: :— 예시 123456|이름|나이|성별||:---|:----:|----:||홍길동|25|남||김나미|30|여||안보영|35|여||대장균|40|남| ↓결과 이름 나이 성별 홍길동 25 남 김나미 30 여 안보영 35 여 대장균 40 남 주석 &lt;!-- 주석내용 --&gt; 주석은 출력결과가 나타나지 않는다. 예시 1&lt;!-- 주석내용1234 --&gt; ↓결과","link":"/2022/04/01/Markdown%EC%A0%95%EB%A6%AC/"},{"title":"release version 14 not supported 에러해결법","text":"Eclipse 에서 작업한 프로젝트를 Intellij에서 열어서 테스트코드를 실행해보니 이런 에러가 났다. 이것은 Java Compiler의 Project bytecode version과 Project SDK 의 버전이 맞지 않아서 그런것이다.이 에러의 해결방법을 알아보자. 일단 좌측 상단의 File -&gt; Settings 로 들어가보자. (Ctrl + Alt + S) 그리고 Build, Execution, Deployment -&gt; Compiler -&gt; Java Compiler 로 들어가서 Project bytecode version에서 JAVAC의 버전을 설정해주자. (필자는 11버전) 여기서 이제 테스트코드를 돌렸는데도 에러가 뜨면 아래 내용을 따라해보자. Intellij 좌측 상단의 File -&gt; Project Structure… 를 클릭한다. (Ctrl + Alt + Shift + S) 그리고 Project Settings -&gt; Project 에서 Project SDK 를 설정하는 곳에 자신의 JDK버전을 선택 후 Apply 후 OK 를 클릭한다. 필자는 Project bytecode version 을 JDK 11 로 설정했으니 11버전 선택 만약 목록에 없다면 Add SDK -&gt; JDK 를 클릭 후 자신의 JDK 경로를 설정후 OK -&gt; OK (필자는 C:\\Program Files\\Java\\jdk-11.0.12 였다.) 그러면 이렇게 테스트코드가 잘 실행된다.","link":"/2022/04/07/release%20version%2014%20not%20supported/"},{"title":"컴퓨터의 자료 표현 방법","text":"컴퓨터는 0과 1로만 데이터를 저장한다. 1bit 는 컴퓨터가 표현하는 데이터의 최소 단위로 2진수 하나의 값을 저장할 수 있는 메모리의 크기이다. 1byte는 8bit 다. 진수 표현 16진수 2 4 8 A 10진수 2 4 8 10 8진수 2 4 10 12 2진수 0010 0100 1000 1010 8bit(1byte)로 5를 표현하면0 0 0 0 0 1 0 1 ↑ 맨 첫번째 비트는 부호비트(MSB)이다. 비트로 나타낼 수 있는 수의 개수는 2 ^ N개의 비트 비트로 나타낼 수 있는 수의 범위는 2 ^ N개의 비트 - 1 Java에서 각종 진수 표현하기 진수 변수 초기화 값 2진수 0B 8진수 0 16진수 0X 예) 결과)","link":"/2022/04/06/%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98%20%EC%9E%90%EB%A3%8C%20%ED%91%9C%ED%98%84%20%EB%B0%A9%EB%B2%95/"}],"tags":[{"name":"Java의 역사","slug":"Java의-역사","link":"/tags/Java%EC%9D%98-%EC%97%AD%EC%82%AC/"},{"name":"Java의 특징","slug":"Java의-특징","link":"/tags/Java%EC%9D%98-%ED%8A%B9%EC%A7%95/"},{"name":"객체지향 프로그래밍","slug":"객체지향-프로그래밍","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"객체지향 언어","slug":"객체지향-언어","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%96%B8%EC%96%B4/"},{"name":"객체와 클래스","slug":"객체와-클래스","link":"/tags/%EA%B0%9D%EC%B2%B4%EC%99%80-%ED%81%B4%EB%9E%98%EC%8A%A4/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"release version ?? not supported","slug":"release-version-not-supported","link":"/tags/release-version-not-supported/"},{"name":"컴퓨터의 자료 표현 방법","slug":"컴퓨터의-자료-표현-방법","link":"/tags/%EC%BB%B4%ED%93%A8%ED%84%B0%EC%9D%98-%EC%9E%90%EB%A3%8C-%ED%91%9C%ED%98%84-%EB%B0%A9%EB%B2%95/"}],"categories":[{"name":"Programming","slug":"Programming","link":"/categories/Programming/"},{"name":"Markdown","slug":"Markdown","link":"/categories/Markdown/"},{"name":"CS","slug":"Programming/CS","link":"/categories/Programming/CS/"},{"name":"Java","slug":"Programming/Java","link":"/categories/Programming/Java/"},{"name":"Markdown 문법 정리","slug":"Markdown/Markdown-문법-정리","link":"/categories/Markdown/Markdown-%EB%AC%B8%EB%B2%95-%EC%A0%95%EB%A6%AC/"},{"name":"IDE","slug":"Programming/Java/IDE","link":"/categories/Programming/Java/IDE/"},{"name":"Error모음","slug":"Programming/Java/IDE/Error모음","link":"/categories/Programming/Java/IDE/Error%EB%AA%A8%EC%9D%8C/"}]}